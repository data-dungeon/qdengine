//*****************************************************************************
//
// Copyright (C) 2000-2005 Quantic Dream SA
//
// These coded instructions, statements and computer programs contain
// unpublished information proprietary to Quantic Dream SA and are 
// protected by French and EEC copyright laws. They may not be 
// disclosed to third parties or copied or duplicated, in whole or in part, 
// without prior written consent of Quantic Dream SA
//
// Unpublished-rights reserved under the Copyright Laws of the EEC.
//
//*****************************************************************************
//
//	SHADER:	ColorPerVertexSkinnedVertexShader
//	The ColorPerVertexSkinnedVertexShader shader implements simple skinning
//
//	05-11-18:	ELE - Created
//*****************************************************************************

// Defines to convert Cg parameters into register indices
#define modelViewProj	register0
#define blendM			register4

//=============================================================================
//	CODE STARTS HERE
//=============================================================================

void main (float4                  position : POSITION,				// Local-space position
		   float4				   diffuse  : COLOR0,				// Diffuse color
		   float2                  texCoord : TEXCOORD0,			// Diffuse texture coordinate
           float4                  weight1 : TEXCOORD2,				// Blending weights
           float4                  weight2 : TEXCOORD3,				// Blending weights
           float4				   matrixIndex1 : TEXCOORD4,			// Matrix indices
           float4				   matrixIndex2 : TEXCOORD5,			// Matrix indices

           uniform float4x4        modelViewProj : register (c0),	// Local-to-clip matrix
           uniform float4          blendM[60] : register (c4),		// Skinning matrix (20 3x4)
           
           out float4              oPosition : POSITION,			// Output clip-space position
           out float4              oColor    : COLOR0,				// Output color
           out float2              oTexCoord : TEXCOORD0			// Output diffuse texture coordinate
		   )
{
	int i;
    float3 skinnedPosition = 0;
	
	for (i = 0 ; i < 4 ; i++) 
	{
		float		index = matrixIndex1[i] * 3;
		
		float3x4	skinningMat = float3x4(blendM[index], blendM[index + 1], blendM[index + 2]);
		float3		bonePosition = mul(skinningMat, position);

		skinnedPosition += weight1[i] * bonePosition;
	}
	for (i = 0 ; i < 4 ; i++) 
	{
		float		index = matrixIndex2[i] * 3;
		
		float3x4	skinningMat = float3x4(blendM[index], blendM[index + 1], blendM[index + 2]);
		float3		bonePosition = mul(skinningMat, position);

		skinnedPosition += weight2[i] * bonePosition;
	}
	
    oPosition = mul (modelViewProj, float4(skinnedPosition, 1));
    oColor = diffuse;
    oTexCoord = texCoord;
}

//=============================================================================
//	CODE ENDS HERE
//=============================================================================