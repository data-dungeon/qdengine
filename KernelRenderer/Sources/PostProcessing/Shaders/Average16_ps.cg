//*****************************************************************************
//
// Copyright (C) 2000-2005 Quantic Dream SA
//
// These coded instructions, statements and computer programs contain
// unpublished information proprietary to Quantic Dream SA and are 
// protected by French and EEC copyright laws. They may not be 
// disclosed to third parties or copied or duplicated, in whole or in part, 
// without prior written consent of Quantic Dream SA
//
// Unpublished-rights reserved under the Copyright Laws of the EEC.
//
//*****************************************************************************
//
//	SHADER:	SIMPLE_FRAGMENT
//
//	05-09-29:	RMA - Created
//*****************************************************************************

// Defines to convert Cg parameters into register indices
#define diffuseMap	texture0

#define offsets    register0  // 16 x Float2 offset



//=============================================================================
//	CODE STARTS HERE
//=============================================================================

void main (float2               texCoord    : TEXCOORD0,		// Lerped diffuse texture coordinate
           uniform sampler2D    diffuseMap  : register (s0),  // Diffuse texture map
           uniform float4       offsets[8]    : register (c0),   // 16 x Float2 offset
           out float4           oColor      : COLOR)			// Final fragment color
{
	oColor =  tex2D(diffuseMap, texCoord + offsets[0].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[0].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[1].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[1].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[2].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[2].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[3].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[3].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[4].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[4].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[5].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[5].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[6].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[6].zw);
	oColor += tex2D(diffuseMap, texCoord + offsets[7].xy);
	oColor += tex2D(diffuseMap, texCoord + offsets[7].zw);
	oColor /= 16.0;
}

//=============================================================================
//	CODE ENDS HERE
//=============================================================================