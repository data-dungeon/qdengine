//*****************************************************************************
//
// Copyright (C) 2000-2005 Quantic Dream SA
//
// These coded instructions, statements and computer programs contain
// unpublished information proprietary to Quantic Dream SA and are 
// protected by French and EEC copyright laws. They may not be 
// disclosed to third parties or copied or duplicated, in whole or in part, 
// without prior written consent of Quantic Dream SA
//
// Unpublished-rights reserved under the Copyright Laws of the EEC.
//
//*****************************************************************************
//
//	CLASS:	POINT4D
//
//	01-09-26:	ELE - Created
//*****************************************************************************

//=============================================================================
//	CODE STARTS HERE
//=============================================================================

//-----------------------------------------------------------------------------
//	Name:		POINT4D constructor
//	Object:		
//	01-01-15:	JVA - Created
//	03-04-03:	SBE - Modified
//-----------------------------------------------------------------------------
POINT4D::POINT4D()
{
	// Do nothing
}

//-----------------------------------------------------------------------------
//	Name:		POINT4D constructor
//	Object:		
//	01-01-15:	JVA - Created
//	03-04-03:	SBE - Modified
//-----------------------------------------------------------------------------
POINT4D::POINT4D( const POINT4D &Point)
{
	Copy( Point );
}

//-----------------------------------------------------------------------------
//	Name:		POINT4D constructor
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
POINT4D::POINT4D(float rX, 
				 float rY, 
				 float rZ,
				 float rW)
{
	SetXYZW(rX, rY, rZ, rW);
}


//-----------------------------------------------------------------------------
//	Name:		POINT4D constructor
//	Object:		
//	01-01-15:	JVA - Created
//	03-04-03:	SBE - Modified
//-----------------------------------------------------------------------------
POINT4D::POINT4D( const VECTOR& Vector)
{
	Copy( Vector );
}

//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-28:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D & POINT4D::operator = ( const POINT4D & Point )
{
	if ( this != & Point )
	{
		Copy( Point );
	}

	return ( *this );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-28:	GGO - Created
//-----------------------------------------------------------------------------
bool POINT4D::operator == ( const POINT4D & Point ) const
{
	return ( ( MATH::EqualsEpsilon( _r[_X_], Point[_X_] ) == true ) &&
			 ( MATH::EqualsEpsilon( _r[_Y_], Point[_Y_] ) == true ) &&
			 ( MATH::EqualsEpsilon( _r[_Z_], Point[_Z_] ) == true ) &&
			 ( MATH::EqualsEpsilon( _r[_W_], Point[_W_]) == true ));
}


//-----------------------------------------------------------------------------
//	Name:		operator != 
//	Object:		Difference operator
//	01-01-17:	RMA - Created
//-----------------------------------------------------------------------------
bool POINT4D::operator != ( const POINT4D & Point ) const
{
	return ( ( MATH::EqualsEpsilon( _r[_X_], Point[_X_] ) == false ) ||
			 ( MATH::EqualsEpsilon( _r[_Y_], Point[_Y_] ) == false ) ||
			 ( MATH::EqualsEpsilon( _r[_Z_], Point[_Z_] ) == false ) ||
			 ( MATH::EqualsEpsilon( _r[_W_], Point[_W_]) == false ));
}


//-----------------------------------------------------------------------------
//	Name:		SetXYZW
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::SetXYZW( const float rX, const float rY, const float rZ, const float rW)
{
	_r[_X_] = rX;
	_r[_Y_] = rY;
	_r[_Z_] = rZ;
	_r[_W_] = rW;
}

//-----------------------------------------------------------------------------
//	Name:		Copy
//	Object:		
//	03-01-09:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Copy(const POINT4D &	P)
{
	SlowCopy(P);
}

//-----------------------------------------------------------------------------
//	Name:		SlowCopy
//	Object:		
//	03-04-03:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::SlowCopy(const POINT4D &	P)
{
	_r[_X_] = P[_X_];
	_r[_Y_] = P[_Y_];
	_r[_Z_] = P[_Z_];
	_r[_W_] = P[_W_];
}

//-----------------------------------------------------------------------------
//	Name:		Copy
//	Object:		
//	03-01-09:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Copy(const VECTOR &	V)
{
	SlowCopy(V);
}

//-----------------------------------------------------------------------------
//	Name:		SlowCopy
//	Object:		
//	03-04-03:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::SlowCopy(const VECTOR &	V)
{
	_r[_X_] = V[_X_];
	_r[_Y_] = V[_Y_];
	_r[_Z_] = V[_Z_];	
	_r[_W_] = 1.0f;
}

//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Add( const float rX, 
					  const float rY, 
					  const float rZ)
{
	_r[_X_] += rX;
	_r[_Y_] += rY;
	_r[_Z_] += rZ;
}

//-----------------------------------------------------------------------------
//	Name:		Add4
//	Object:		
//	05-11-28:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Add4(const POINT4D &	Point)
{
	_r[_X_] += Point._r[_X_];
	_r[_Y_] += Point._r[_Y_];
	_r[_Z_] += Point._r[_Z_];
	_r[_W_] += Point._r[_W_];
}

//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Add( const POINT4D & Point )
{
	_r[_X_] += Point[_X_];
	_r[_Y_] += Point[_Y_];
	_r[_Z_] += Point[_Z_];
}


//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Add( const VECTOR & Vector )
{
	_r[_X_] += Vector[_X_];
	_r[_Y_] += Vector[_Y_];
	_r[_Z_] += Vector[_Z_];
}


//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Add( const POINT4D &	Point,
					  const VECTOR &	Vector )
{
	_r[_X_] = Point[_X_] + Vector[_X_];
	_r[_Y_] = Point[_Y_] + Vector[_Y_];
	_r[_Z_] = Point[_Z_] + Vector[_Z_];
}


//-----------------------------------------------------------------------------
//	Name:		Sub
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Sub( const POINT4D & Point )
{
	_r[_X_] -= Point[_X_];
	_r[_Y_] -= Point[_Y_];
	_r[_Z_] -= Point[_Z_];
}

//-----------------------------------------------------------------------------
//	Name:		Sub4
//	Object:		
//	05-11-28:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Sub4(const POINT4D &	Point)
{
	_r[_X_] -= Point[_X_];
	_r[_Y_] -= Point[_Y_];
	_r[_Z_] -= Point[_Z_];
	_r[_W_] -= Point[_W_];
}

//-----------------------------------------------------------------------------
//	Name:		Sub
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Sub( const VECTOR & Vector )
{
	_r[_X_] -= Vector[_X_];
	_r[_Y_] -= Vector[_Y_];
	_r[_Z_] -= Vector[_Z_];
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: Operator +
//	01-02-28:	RMA - Created
//-----------------------------------------------------------------------------
POINT4D POINT4D::operator + ( const POINT4D & Point) const
{
	return ( POINT4D( _r[_X_] + Point[_X_], _r[_Y_] + Point[_Y_], _r[_Z_] + Point[_Z_], 1.0f ) );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: Operator +=
//	01-02-28:	RMA - Created
//-----------------------------------------------------------------------------
POINT4D & POINT4D::operator += (const POINT4D & Point)
{
	_r[_X_] += Point[_X_];
	_r[_Y_] += Point[_Y_];
	_r[_Z_] += Point[_Z_];

	return ( *this );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-26:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D &	POINT4D::operator -= ( const POINT4D & Point )
{
	_r[_X_] -= Point[_X_];
	_r[_Y_] -= Point[_Y_];
	_r[_Z_] -= Point[_Z_];

	return ( *this );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-26:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D &	POINT4D::operator -= ( const VECTOR & Vector )
{
	_r[_X_] -= Vector[_X_];
	_r[_Y_] -= Vector[_Y_];
	_r[_Z_] -= Vector[_Z_];

	return ( *this );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator -
//	Object: Creates a vector from its both extremities.
//	01-02-26:	GGO - Created
//-----------------------------------------------------------------------------
VECTOR	POINT4D::operator - ( const POINT4D & Point ) const
{
	return ( VECTOR( _r[_X_] - Point[_X_], _r[_Y_] - Point[_Y_], _r[_Z_] - Point[_Z_] ) );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-27:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D	POINT4D::operator - (const VECTOR& Vector) const
{
	return ( POINT4D( _r[_X_] - Vector[_X_], _r[_Y_] - Vector[_Y_], _r[_Z_] - Vector[_Z_], 1.0f ) );
}


//-----------------------------------------------------------------------------
//	Name:		Mul
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Mul( float Value )
{
	_r[_X_] *= Value;
	_r[_Y_] *= Value;
	_r[_Z_] *= Value;
}


//-----------------------------------------------------------------------------
//	Name:		Mul
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Mul( const VECTOR & Scale3D )
{
	_r[_X_] *= Scale3D.GetX();
	_r[_Y_] *= Scale3D.GetY();
	_r[_Z_] *= Scale3D.GetZ();
}

//-----------------------------------------------------------------------------
//	Name:		MulW
//	Object:		
//	04-10-11:	ELE - Created
//-----------------------------------------------------------------------------
POINT4D	POINT4D::MulW(float	rValue)
{
	return	( POINT4D(_r[_X_] * rValue, _r[_Y_] * rValue, _r[_Z_] * rValue, _r[_W_] * rValue) );
}

//-----------------------------------------------------------------------------
//	Name:		Dot
//	Object:		
//	04-10-11:	ELE - Created
//-----------------------------------------------------------------------------
float	POINT4D::Dot(const POINT4D &	Point)
{
	return	( _r[_X_] * Point[_X_] + _r[_Y_] * Point[_Y_] + _r[_Z_] * Point[_Z_] + _r[_W_] * Point[_W_] );
}

//-----------------------------------------------------------------------------
//	Name:		POINT4D::operator 
//	Object:		Operator *
//	01-04-26:	RMA - Created
//-----------------------------------------------------------------------------
POINT4D POINT4D::operator * (const float rValue)
{
	return ( POINT4D( _r[_X_] * rValue, _r[_Y_] * rValue, _r[_Z_] * rValue, 1.0f ) );
}

//-----------------------------------------------------------------------------
//	Name:		POINT4D::operator 
//	Object:		Operator *
//	02-11-18:	SBE - Created
//-----------------------------------------------------------------------------
POINT4D POINT4D::operator *(const POINT4D &	Point)
{
	return ( POINT4D( _r[_X_] * Point[_X_], _r[_Y_] * Point[_Y_], _r[_Z_] * Point[_Z_], _r[_W_] * Point[_W_] ) );
}

//-----------------------------------------------------------------------------
//	Name:		POINT4D::operator *=
//	Object:		
//	01-02-26:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D &	POINT4D::operator *= ( const float rValue )
{
	_r[_X_] *= rValue;
	_r[_Y_] *= rValue;
	_r[_Z_] *= rValue;

	return ( *this );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-26:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D &	POINT4D::operator *= ( const VECTOR & Scale )
{
	_r[_X_] *= Scale.GetX();
	_r[_Y_] *= Scale.GetY();
	_r[_Z_] *= Scale.GetZ();

	return ( *this );
}


//-----------------------------------------------------------------------------
//	Name:		Neg
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::Neg()
{
	_r[_X_] = - _r[_X_];
	_r[_Y_] = - _r[_Y_];
	_r[_Z_] = - _r[_Z_];
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object: 
//	01-02-26:	GGO - Created
//-----------------------------------------------------------------------------
POINT4D	POINT4D::operator - () const
{
	return ( POINT4D( -_r[_X_], -_r[_Y_], -_r[_Z_], 1.0f ) );
}


//-----------------------------------------------------------------------------
//	Name:		GetXYZ
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::GetXYZW(float &rX, float &rY, float &rZ, float &rW) const
{
	rX = _r[_X_];
	rY = _r[_Y_];
	rZ = _r[_Z_];
	rW = _r[_W_];
}

//-----------------------------------------------------------------------------
//	Name:		SetX
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::SetX( const float rX )
{
	_r[_X_] = rX;
}


//-----------------------------------------------------------------------------
//	Name:		SetY
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::SetY( const float rY )
{
	_r[_Y_] = rY;
}


//-----------------------------------------------------------------------------
//	Name:		SetZ
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
void	POINT4D::SetZ( const float rZ )
{
	_r[_Z_] = rZ;
}


//-----------------------------------------------------------------------------
//	Name:		SetW
//	Object:		
//	01-09-26:	ELE - Created
//-----------------------------------------------------------------------------
void	POINT4D::SetW(const float	rW)
{
	_r[_W_] = rW;
}


//-----------------------------------------------------------------------------
//	Name:		GetX
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
float	POINT4D::GetX() const
{
	return ( _r[_X_] );
}


//-----------------------------------------------------------------------------
//	Name:		GetY
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
float	POINT4D::GetY() const
{
	return ( _r[_Y_] );
}


//-----------------------------------------------------------------------------
//	Name:		GetZ
//	Object:		
//	01-01-15:	JVA - Created
//-----------------------------------------------------------------------------
float	POINT4D::GetZ() const
{
	return ( _r[_Z_] );
}


//-----------------------------------------------------------------------------
//	Name:		GetW
//	Object:		
//	01-09-26:	ELE - Created
//-----------------------------------------------------------------------------
float	POINT4D::GetW() const
{
	return	( _r[_W_] );
}


//-----------------------------------------------------------------------------
//	Name: POINT4D::operator 
//	Object:		Operator /
//	01-04-26:	RMA - Created
//-----------------------------------------------------------------------------
POINT4D	POINT4D::operator / (const float rValue)
{
	return (*this * (1.0f / rValue));
}

//-----------------------------------------------------------------------------
//	Name:		POINT4D::operator 
//	Object:		Operator /=
//	01-04-26:	RMA - Created
//-----------------------------------------------------------------------------
POINT4D & POINT4D::operator /= (const float rValue)
{
	*this *= (1.0f / rValue);

	return (*this);
}

//-----------------------------------------------------------------------------
//	Name:		operator[]
//	Object:		
//	03-01-09:	SBE - Created
//-----------------------------------------------------------------------------
float	POINT4D::operator[](const unsigned int	index) const
{
	QDT_ASSERT(index<4);
	return _r[index];
}

//-----------------------------------------------------------------------------
//	Name:		operator[]
//	Object:		
//	03-01-09:	SBE - Created
//-----------------------------------------------------------------------------
float &	POINT4D::operator[](const unsigned int	index)
{
	QDT_ASSERT(index<4);
	return _r[index];
}

//-----------------------------------------------------------------------------
//	Name:		Zero
//	Object:		
//	03-01-09:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Zero()
{
	SlowZero();
}

//-----------------------------------------------------------------------------
//	Name:		SlowZero
//	Object:		
//	03-01-09:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::SlowZero()
{
	_r[_X_] = 0.0f ;
	_r[_Y_] = 0.0f ;
	_r[_Z_] = 0.0f ;
	_r[_W_] = 1.0f ;
}



//-----------------------------------------------------------------------------
//	Name:		ToPointer
//	Object:		
//	02-10-16:	SBE - Created
//-----------------------------------------------------------------------------
float*	POINT4D::ToPointer()
{
	return (&_r[_X_]);
}

//-----------------------------------------------------------------------------
//	Name:		ToPointer
//	Object:		
//	02-10-16:	SBE - Created
//-----------------------------------------------------------------------------
const float* POINT4D::ToPointer() const
{
	return (&_r[_X_]);
}

//-----------------------------------------------------------------------------
//	Name:		Mul
//	Object:		
//	03-06-07:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Mul(const POINT4D &Point)
{
	_r[_X_] *= Point.GetX();
	_r[_Y_] *= Point.GetY();
	_r[_Z_] *= Point.GetZ();
	_r[_W_] *= Point.GetW();
}

//-----------------------------------------------------------------------------
//	Name:		Mul
//	Object:		
//	03-06-07:	SBE - Created
//-----------------------------------------------------------------------------
void	POINT4D::Mul(const POINT4D &Point1, const POINT4D &Point2)
{
	_r[_X_] = Point1.GetX() * Point2.GetX();
	_r[_Y_] = Point1.GetY() * Point2.GetY();
	_r[_Z_] = Point1.GetZ() * Point2.GetZ();
	_r[_W_] = Point1.GetW() * Point2.GetW();
}

//-----------------------------------------------------------------------------
//	Name:		Length
//	Object:		
//	03-06-07:	SBE - Created
//-----------------------------------------------------------------------------
float	POINT4D::Length() const
{
	return ( MATH::Sqrt(MATH::Square(_r[_X_]) + MATH::Square(_r[_Y_]) + MATH::Square(_r[_Z_]) + MATH::Square(_r[_W_])) );
}

//=============================================================================
//	CODE ENDS HERE
//=============================================================================
