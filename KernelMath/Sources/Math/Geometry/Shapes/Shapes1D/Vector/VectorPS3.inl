//=============================================================================
// CODE STARTS HERE
//=============================================================================

//-----------------------------------------------------------------------------
//	Name:		VECTOR
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR::VECTOR(const Vector3 & V)
{
	_V = V;
}

//-----------------------------------------------------------------------------
//	Name:		ConstructPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::ConstructPS3(const VECTOR &	V)
{
	_V = V._V;
}

//-----------------------------------------------------------------------------
//	Name:		ConstructPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::ConstructPS3(const float	rVx,
							 const float	rVy,
							 const float	rVz)
{
	_V = Vector3(rVx, rVy, rVz);
}

//-----------------------------------------------------------------------------
//	Name:		InterpolatePS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::InterpolatePS3(float	rT,
							   const VECTOR &	V1,
							   const VECTOR &	V2)
{
	_V = lerp(rT, V1._V, V2._V);
}

//-----------------------------------------------------------------------------
//	Name:		AssignPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR &	VECTOR::AssignPS3(const VECTOR &	Vector)
{
	_V = Vector._V;
	return (*this);
}

//-----------------------------------------------------------------------------
//	Name:		CopyPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::CopyPS3(const VECTOR &	V)
{
	_V = V._V;
}

//-----------------------------------------------------------------------------
//	Name:		LengthPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
float	VECTOR::LengthPS3() const
{
	return (length(_V));
}

//-----------------------------------------------------------------------------
//	Name:		SquareLengthPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
float	VECTOR::SquareLengthPS3() const
{
	return (lengthSqr(_V));
}

//-----------------------------------------------------------------------------
//	Name:		AbsolutePS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::AbsolutePS3()
{
	_V = absPerElem(_V);
}

//-----------------------------------------------------------------------------
//	Name:		AddMulPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::AddMulPS3(const VECTOR &	V,
						  float				r)
{
	_V += V._V * r;
}

//-----------------------------------------------------------------------------
//	Name:		AddPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::AddPS3(const VECTOR &	p,
					   const float		s)
{
	AddMulPS3(p, s);
}

//-----------------------------------------------------------------------------
//	Name:		AddPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::AddPS3(const VECTOR &	V1,
					   const VECTOR &	V2)
{
	_V = V1._V + V2._V;
}

//-----------------------------------------------------------------------------
//	Name:		AddPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::AddPS3(const VECTOR &	V)
{
	_V += V._V;
}

//-----------------------------------------------------------------------------
//	Name:		AddPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::AddPS3(float	r)
{
	_V += Vector3(r, r, r);
}

//-----------------------------------------------------------------------------
//	Name:		SubPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::SubPS3(const VECTOR &	V1,
					   const VECTOR &	V2)
{
	_V = V1._V - V2._V;
}

//-----------------------------------------------------------------------------
//	Name:		SubPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::SubPS3(const VECTOR &	V)
{
	_V -= V._V;
}

//-----------------------------------------------------------------------------
//	Name:		SubPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::SubPS3(float	r)
{
	_V -= Vector3(r, r, r);
}

//-----------------------------------------------------------------------------
//	Name:		NegPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::NegPS3(const VECTOR &	V)
{
	_V = -V._V;
}

//-----------------------------------------------------------------------------
//	Name:		NegPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::NegPS3()
{
	_V = - _V;
}

//-----------------------------------------------------------------------------
//	Name:		MulPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::MulPS3(const VECTOR &	V,
						   const float		rValue)
{
	_V = V._V * rValue;
}

//-----------------------------------------------------------------------------
//	Name:		MulPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::MulPS3(const float	rValue)
{
	_V *= rValue;
}


//-----------------------------------------------------------------------------
//	Name:		OpAddAssignPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR &	VECTOR::OpAddAssignPS3(const VECTOR &	V)
{
	Add(V);
	return (*this);
}

//-----------------------------------------------------------------------------
//	Name:		OpAddPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR	VECTOR::OpAddPS3(const VECTOR &	V) const
{
	return VECTOR(_V + V._V);
}

//-----------------------------------------------------------------------------
//	Name:		OpSubAssignPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR &	VECTOR::OpSubAssignPS3(const VECTOR &	V)
{
	Sub(V);
	return (*this);
}

//-----------------------------------------------------------------------------
//	Name:		OpSubPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR	VECTOR::OpSubPS3(const VECTOR &	V) const
{
	return VECTOR(_V - V._V);
}

//-----------------------------------------------------------------------------
//	Name:		OpMinusUnaryPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR	VECTOR::OpMinusUnaryPS3() const
{
	return VECTOR(-_V);
}

//-----------------------------------------------------------------------------
//	Name:		OpMulAssignPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR &	VECTOR::OpMulAssignPS3(float	rValue)
{
	Mul(rValue);
	return (*this);
}

//-----------------------------------------------------------------------------
//	Name:		OpMulPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR	VECTOR::OpMulPS3(float	rValue) const
{
	return VECTOR(_V * rValue);
}

//-----------------------------------------------------------------------------
//	Name:		OpDivAssignPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR &	VECTOR::OpDivAssignPS3(const float	rValue)
{
	_V /= rValue;
	return (*this);
}

//-----------------------------------------------------------------------------
//	Name:		OpDivPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
VECTOR	VECTOR::OpDivPS3(const float	rValue) const
{
	return VECTOR(_V / rValue);
}

//-----------------------------------------------------------------------------
//	Name:		CrossPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::CrossPS3(const VECTOR &	V1,
						 const VECTOR &	V2)
{
	_V = cross(V1._V, V2._V);
}

//-----------------------------------------------------------------------------
//	Name:		DotPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
float	VECTOR::DotPS3(const VECTOR &	V) const
{
	return (dot(_V, V._V));
}

//-----------------------------------------------------------------------------
//	Name:		ZeroPS3
//	Object:		
//	06-03-09:	VMA - Created
//-----------------------------------------------------------------------------
void	VECTOR::ZeroPS3()
{
	_V = Vector3(_VECTORMATH_UNIT_0001);
}

//=============================================================================
// CODE ENDS HERE
//=============================================================================
