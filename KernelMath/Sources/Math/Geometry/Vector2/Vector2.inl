//*****************************************************************************
//
// Copyright (C) 2000-2005 Quantic Dream SA
//
// These coded instructions, statements and computer programs contain
// unpublished information proprietary to Quantic Dream SA and are 
// protected by French and EEC copyright laws. They may not be 
// disclosed to third parties or copied or duplicated, in whole or in part, 
// without prior written consent of Quantic Dream SA
//
// Unpublished-rights reserved under the Copyright Laws of the EEC.
//
//*****************************************************************************
//
//	CLASS:	VECTOR_2
//
//	03-03-10:	RMA - Created
//*****************************************************************************

//=============================================================================
//	CODE STARTS HERE
//=============================================================================

//-----------------------------------------------------------------------------
//	Name:		VECTOR_2 constructor
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
/*VECTOR_2::VECTOR_2()
{
	// Do nothing
}
*/

//-----------------------------------------------------------------------------
//	Name:		VECTOR_2 constructor
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
VECTOR_2::VECTOR_2(const VECTOR_2& C)
:
_rX(C._rX),
_rY(C._rY)
{
	// Do nothing
}

//-----------------------------------------------------------------------------
//	Name:		VECTOR_2 constructor
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
VECTOR_2::VECTOR_2(float rX, float rY)
:
_rX(rX),
_rY(rY)
{
	// Do nothing
}

//-----------------------------------------------------------------------------
//	Name:		VECTOR_2 destructor
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
VECTOR_2::~VECTOR_2()
{
	// Do nothing
}

//-----------------------------------------------------------------------------
//	Name:		operator=
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
VECTOR_2 &	VECTOR_2::operator=(const VECTOR_2& C)
{
	_rX = C._rX;
	_rY = C._rY;
	return	*this;
}

//-----------------------------------------------------------------------------
//	Name:		SetX
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::SetX(float r)
{
	_rX = r;
}

//-----------------------------------------------------------------------------
//	Name:		SetY
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::SetY(float r)
{
	_rY = r;
}

//-----------------------------------------------------------------------------
//	Name:		GetX
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
float VECTOR_2::GetX(void) const
{
	return _rX;
}

//-----------------------------------------------------------------------------
//	Name:		GetY
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
float VECTOR_2::GetY(void) const
{
	return _rY;
}

//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Add(const VECTOR_2& V0, const VECTOR_2& V1)
{
	_rX = V0._rX + V1._rX;
	_rY = V0._rY + V1._rY;
}

//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Add(const VECTOR_2& V)
{
	_rX += V._rX;
	_rY += V._rY;
}

//-----------------------------------------------------------------------------
//	Name:		Sub
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Sub(const VECTOR_2& V0, const VECTOR_2& V1)
{
	_rX = V0._rX - V1._rX;
	_rY = V0._rY - V1._rY;
}

//-----------------------------------------------------------------------------
//	Name:		Sub
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Sub(const VECTOR_2& V)
{
	_rX -= V._rX;
	_rY -= V._rY;
}

//-----------------------------------------------------------------------------
//	Name:		Mul
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Mul(float r)
{
	_rX *= r;
	_rY *= r;
}

//-----------------------------------------------------------------------------
//	Name:		AddAssign
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
VECTOR_2& VECTOR_2::AddAssign(const VECTOR_2& V)
{
	_rX += V._rX;
	_rY += V._rY;
	return *this;
}

//-----------------------------------------------------------------------------
//	Name:		Add
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
VECTOR_2 VECTOR_2::Add(const VECTOR_2& VectorAdded) const
{
	return VECTOR_2(_rX + VectorAdded.GetX(), _rY + VectorAdded.GetY());
}

//-----------------------------------------------------------------------------
//	Name:		+
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
VECTOR_2 VECTOR_2::operator+(const VECTOR_2& VectorAdded) const
{
	return Add(VectorAdded);
}

//-----------------------------------------------------------------------------
//	Name:		+=
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
VECTOR_2& VECTOR_2::operator+=(const VECTOR_2& VectorAdded)
{
	return	AddAssign(VectorAdded);
}

//-----------------------------------------------------------------------------
//	Name:		*
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
VECTOR_2 VECTOR_2::operator*(const float rValue) const
{
	return	Mul(rValue);
}

//-----------------------------------------------------------------------------
//	Name:		Mul
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
VECTOR_2 VECTOR_2::Mul(float rValue) const
{
	return VECTOR_2( _rX * rValue, _rY * rValue);
}

//-----------------------------------------------------------------------------
//	Name:		*=
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
VECTOR_2& VECTOR_2::operator*=(float rValue)
{
	return	MulAssign(rValue);
}

//-----------------------------------------------------------------------------
//	Name:		*=
//	Object:		
//	06-01-30:	BFA - Created
//-----------------------------------------------------------------------------
bool VECTOR_2::operator==(const VECTOR_2& Vector) const
{
	return	(	(MATH::EqualsEpsilon(_rX, Vector.GetX(), 0.001f ) == true) &&
				(MATH::EqualsEpsilon(_rY, Vector.GetY(), 0.001f ) == true) );
}

//-----------------------------------------------------------------------------
//	Name:		MulAssign
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
VECTOR_2& VECTOR_2::MulAssign(float r)
{
	_rX *= r;
	_rY *= r;
	return *this;
}

//-----------------------------------------------------------------------------
//	Name:		Length
//	Object:		
//	03-03-18:	RMA - Created
//-----------------------------------------------------------------------------
float VECTOR_2::Length(void)
{
	return (MATH::Sqrt(_rX * _rX + _rY * _rY));
}

//-----------------------------------------------------------------------------
//	Name:		SquareLength
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
float VECTOR_2::SquareLength(void) const
{
	return (_rX * _rX + _rY * _rY);
}

//-----------------------------------------------------------------------------
//	Name:		Cross
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
float VECTOR_2::Cross(const VECTOR_2& V) const
{
	return ((_rX * V._rY) - (_rY * V._rX));
}

//-----------------------------------------------------------------------------
//	Name:		Dot
//	Object:		
//	03-03-10:	RMA - Created
//-----------------------------------------------------------------------------
float VECTOR_2::Dot(const VECTOR_2& V) const
{ 
	return ((_rX * V._rX) + (_rY * V._rY));
}

//-----------------------------------------------------------------------------
//	Name:		Normalize
//	Object:		
//	03-03-18:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Normalize(void)
{
	QDT_ASSERT(SquareLength() != 0.0f);
	MulAssign(1.0f / Length());
}

//-----------------------------------------------------------------------------
//	Name:		Proj
//	Object:		
//	03-03-20:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Proj(const VECTOR_2& P, const VECTOR_2& Q)
{
	QDT_ASSERT(&P != this);
	QDT_ASSERT(&Q != this);
	QDT_ASSERT(Q.SquareLength() != 0);

	*this = Q;
	MulAssign(P.Dot(Q) / Q.SquareLength());
}

//-----------------------------------------------------------------------------
//	Name:		Perp
//	Object:		
//	03-03-20:	RMA - Created
//-----------------------------------------------------------------------------
void VECTOR_2::Perp(const VECTOR_2& P, const VECTOR_2& Q)
{
	VECTOR_2 Proj;
	Proj.Proj(P, Q);

	Sub(P, Proj);
}

//=============================================================================
//	CODE ENDS HERE
//=============================================================================
